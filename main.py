import telebot
from telebot.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BotCommand,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from functional_student_code.student_menu import TelegramBot  # –í–∞—à –º–æ–¥—É–ª—å —Å –º–µ–Ω—é –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
from sql_logic.connect_to_sql import SqlConnection
from functional_student_code.student_registration import request_student_number, request_full_name, request_group

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å—ã
from sql_logic.queries import (
    GET_USER_ROLE,
    SELECT_TEACHER_BY_CHAT_ID,
    INSERT_TEACHER,
    SELECT_STUDENT_BY_CHAT_ID,
    INSERT_STUDENT
)

TOKEN = "8056279378:AAGX8tILI43XHYhJrQC3JF3xUFUoyPCr9vY"
bot = telebot.TeleBot(TOKEN)

# –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä –∑–∞—á—ë—Ç–∫–∏)
user_data = {}
bot_last_message={}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏/–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è."""
    chat_id = message.chat.id

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –≤ Telegram
    bot.set_my_commands([
        BotCommand("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand("menu", "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
        BotCommand("help", "–ü–æ–º–æ—â—å"),
        BotCommand("meow", "–°–∫–∞–∑–∞—Ç—å meow"),
        BotCommand("clear", "–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"),
    ])

    try:
        with SqlConnection() as (conn, cursor):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
            cursor.execute(GET_USER_ROLE, (chat_id, chat_id))
            result = cursor.fetchone()

            if result:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –ë–î
                role = result[0]
                if role == 'student':
                    markup = ReplyKeyboardMarkup(resize_keyboard=True)
                    markup.row(KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

                    bot.send_message(chat_id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç! ‚úÖ\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é.", reply_markup=markup)
                else:
                    bot.send_message(chat_id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å! ‚úÖ")
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å
                markup = InlineKeyboardMarkup()
                markup.add(
                    InlineKeyboardButton("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="teacher_button"),
                    InlineKeyboardButton("–°—Ç—É–¥–µ–Ω—Ç", callback_data="student_button")
                )
                bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=markup)

    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö.")


@bot.callback_query_handler(func=lambda call: call.data == "teacher_button")
def handle_teacher(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'."""
    chat_id = call.message.chat.id

    try:
        with SqlConnection() as (conn, cursor):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
            cursor.execute(SELECT_TEACHER_BY_CHAT_ID, (chat_id,))
            existing_teacher = cursor.fetchone()

            if existing_teacher:
                bot.send_message(chat_id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å! ‚úÖ")
            else:
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–¥–∞–Ω–Ω—ã–µ –ø–æ–∫–∞ –ø—Ä–∏–º–µ—Ä–Ω—ã–µ)
                cursor.execute(INSERT_TEACHER, (chat_id, "–§–∞–º–∏–ª–∏—è", "–ò–º—è", "–û—Ç—á–µ—Å—Ç–≤–æ", 0))
                conn.commit()
                bot.send_message(chat_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å!")
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ")


@bot.callback_query_handler(func=lambda call: call.data == "student_button")
def handle_student(call):
    chat_id = call.message.chat.id
    try:
        with SqlConnection() as (conn, cursor):
            cursor.execute(SELECT_STUDENT_BY_CHAT_ID, (chat_id,))
            existing_student = cursor.fetchone()

            if existing_student:
                bot.send_message(chat_id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç! ‚úÖ\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é.")
            else:
                msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –∑–∞—á—ë—Ç–∫–∏:")
                # –ü–µ—Ä–µ–¥–∞—ë–º bot –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –≤ —Ñ—É–Ω–∫—Ü–∏—é
                bot.register_next_step_handler(msg, lambda m: request_student_number(m, bot))
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ")

@bot.message_handler(func=lambda message: message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def handle_main_menu(message):
    chat_id = message.chat.id
    user_message_id = message.message_id  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    delete_previous_message(chat_id, user_message_id)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
    if chat_id in bot_last_message:
        try:
            delete_previous_message(chat_id, bot_last_message[chat_id])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞: {e}")
    try:
        with SqlConnection() as (conn, cursor):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –∏–∑ –ë–î
            cursor.execute(GET_USER_ROLE, (chat_id, chat_id))
            result = cursor.fetchone()

            if result:
                role = result[0]
                if role == "student":
              
                    telegram_bot = TelegramBot(bot)
                    new_message = telegram_bot.send_menu(chat_id)
                    if new_message:
                      bot_last_message[chat_id] = new_message.message_id
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞: send_menu() –Ω–µ –≤–µ—Ä–Ω—É–ª —Å–æ–æ–±—â–µ–Ω–∏–µ!")
                elif role == "teacher":
                    bot.send_message(chat_id, "–ú–µ–Ω—é –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
            else:
                delete_previous_message(chat_id,bot_last_message[chat_id])
                bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start.")
    except Exception as e:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start.")

def delete_previous_message(chat_id, message_id):
    """–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è."""
    try:
        bot.delete_message(chat_id, message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")

@bot.message_handler(commands=['menu'])
def open_menu(message):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ –¥–∞–Ω–Ω—ã–º –ë–î)."""
    chat_id = message.chat.id
    user_message_id = message.message_id  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    delete_previous_message(chat_id, user_message_id)

    if chat_id in bot_last_message:
        try:
            delete_previous_message(chat_id, bot_last_message[chat_id])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞: {e}")
    try:
        with SqlConnection() as (conn, cursor):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –∏–∑ –ë–î
            cursor.execute(GET_USER_ROLE, (chat_id, chat_id))
            result = cursor.fetchone()

            if result:
                role = result[0]
                if role == "student":
                    telegram_bot = TelegramBot(bot)
                    new_message = telegram_bot.send_menu(chat_id)
                    if new_message:
                      bot_last_message[chat_id] = new_message.message_id
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞: send_menu() –Ω–µ –≤–µ—Ä–Ω—É–ª —Å–æ–æ–±—â–µ–Ω–∏–µ!")
                elif role == "teacher":
                    bot.send_message(chat_id, "–ú–µ–Ω—é –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
            else:
                delete_previous_message(chat_id,bot_last_message[chat_id])

                bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start.")
    except Exception as e:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start.")


@bot.message_handler(commands=['help'])
def send_help(message):
    """–ü—Ä–æ—Å—Ç–µ–π—à–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏."""
    bot.send_message(message.chat.id, "–í–∞–º –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç")


@bot.message_handler(commands=['meow'])
def send_meow(message):
    """–ü—Ä–∏–º–µ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã."""
    bot.send_message(message.chat.id, "–¢—ã –µ–±–ª–∞–Ω? –¢–≥ –±–æ—Ç—ã –Ω–µ –º—è—É–∫–∞—é—Ç.")


@bot.message_handler(commands=['clear'])
def clear_chat(message):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ ~200 —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –±–æ—Ç–æ–º, –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å."""
    chat_id = message.chat.id
    message_id = message.message_id

    for i in range(200):
        try:
            bot.delete_message(chat_id, message_id - i)
        except telebot.apihelper.ApiException as e:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if "message to delete not found" in str(e):
                continue

    bot.send_message(chat_id, "–ß–∞—Ç –æ—á–∏—â–µ–Ω!", disable_notification=True)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling()
