from sql_logic.connect_to_sql import SqlConnection
from sql_logic.queries import INSERT_STUDENT, INSERT_APPLICATION
import telebot

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

def start_registration(message, bot):
    """
    –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –§–ò–û.
    """
    chat_id = message.chat.id
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):")
    bot.register_next_step_handler(msg, lambda m: request_full_name(m, bot))

def request_full_name(message, bot):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –§–ò–û, –ø–∞—Ä—Å–∏–º –µ–≥–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –≥—Ä—É–ø–ø—ã.
    """
    chat_id = message.chat.id
    full_name = message.text.strip()

    if not full_name:
        msg = bot.send_message(chat_id, "‚ùå –§–ò–û –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(msg, lambda m: request_full_name(m, bot))
        return

    try:
        last_name, first_name, middle_name = parse_full_name(full_name)
    except ValueError as e:
        msg = bot.send_message(chat_id, str(e))
        bot.register_next_step_handler(msg, lambda m: request_full_name(m, bot))
        return

    user_data[chat_id] = {
        "last_name": last_name,
        "first_name": first_name,
        "middle_name": middle_name
    }

    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É(–í —Ñ–æ—Ä–º–∞—Ç–µ –°–ò–°-32):")
    bot.register_next_step_handler(msg, lambda m: request_group(m, bot))

def request_group(message, bot):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç —Å—Ç–∞—Ä–æ—Å—Ç–æ–π.
    """
    chat_id = message.chat.id
    group = message.text.strip()

    if not group:
        msg = bot.send_message(chat_id, "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(msg, lambda m: request_group(m, bot))
        return

    user_data[chat_id]["group"] = group

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞
    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    msg = bot.send_message(chat_id, "–Ø–≤–ª—è–µ—Ç–µ—Å—å –ª–∏ –≤—ã —Å—Ç–∞—Ä–æ—Å—Ç–æ–π?", reply_markup=markup)
    bot.register_next_step_handler(msg, lambda m: request_leader_status(m, bot))

def request_leader_status(message, bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä: –µ—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –≤—ã–±–∏—Ä–∞–µ—Ç ¬´–î–∞¬ª ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
    –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ –∫–∞–∫ —Å—Ç–∞—Ä–æ—Å—Ç—É (–∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü—É applications –∏ students),
    –µ—Å–ª–∏ ¬´–ù–µ—Ç¬ª ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ –∫–∞–∫ –æ–±—ã—á–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –≤ students).
    """
    chat_id = message.chat.id
    answer = message.text.strip().lower()

    if answer not in ["–¥–∞", "–Ω–µ—Ç"]:
        msg = bot.send_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–î–∞¬ª –∏–ª–∏ ¬´–ù–µ—Ç¬ª.")
        bot.register_next_step_handler(msg, lambda m: request_leader_status(m, bot))
        return

    try:
        with SqlConnection() as (conn, cursor):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ groups
            group = user_data[chat_id]["group"]
            cursor.execute("SELECT GroupName FROM groups WHERE GroupName = %s", (group,))
            existing_group = cursor.fetchone()
            if not existing_group:
                bot.send_message(chat_id, f"‚ùå –ì—Ä—É–ø–ø–∞ {group} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
                return

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–∞–∫ —Å—Ç–∞—Ä–æ—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–≤–∞ –∑–∞–ø—Ä–æ—Å–∞:
            if answer == "–¥–∞":
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞ —Å—Ç–∞—Ä–æ—Å—Ç—É –≤ —Ç–∞–±–ª–∏—Ü—É applications
                cursor.execute(
                    INSERT_APPLICATION,
                    (
                        chat_id,
                        user_data[chat_id]["last_name"],
                        user_data[chat_id]["first_name"],
                        user_data[chat_id]["middle_name"],
                        "–°—Ç–∞—Ä–æ—Å—Ç–∞"
                    )
                )
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ—Å—Ç—É –≤ —Ç–∞–±–ª–∏—Ü–µ students
                cursor.execute(
                    INSERT_STUDENT,
                    (
                        chat_id,
                        user_data[chat_id]["last_name"],
                        user_data[chat_id]["first_name"],
                        user_data[chat_id]["middle_name"],
                        group
                    )
                )
                conn.commit()
                bot.send_message(chat_id, "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç–∞—Ä–æ—Å—Ç–∞. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, –∞ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
            else:
                # –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É students
                cursor.execute(
                    INSERT_STUDENT,
                    (
                        chat_id,
                        user_data[chat_id]["last_name"],
                        user_data[chat_id]["first_name"],
                        user_data[chat_id]["middle_name"],
                        group
                    )
                )
                conn.commit()
                bot.send_message(
                    chat_id,
                    f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                    f"üë§ –§–ò–û: {user_data[chat_id]['last_name']} {user_data[chat_id]['first_name']} {user_data[chat_id]['middle_name']}\n"
                    f"üéì –ì—Ä—É–ø–ø–∞: {group}"
                )
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    finally:
        if chat_id in user_data:
            del user_data[chat_id]



def parse_full_name(full_name):
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –§–ò–û –≤ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ.
    –ï—Å–ª–∏ –æ—Ç—á–µ—Å—Ç–≤–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.
    """
    words = full_name.split()

    if len(words) == 2:
        last_name, first_name = words
        middle_name = ""
    elif len(words) == 3:
        last_name, first_name, middle_name = words
    else:
        raise ValueError("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é, –ò–º—è –∏ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏) –û—Ç—á–µ—Å—Ç–≤–æ.")

    return last_name, first_name, middle_name
