import os
import logging
import requests
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

folder_path = r"A:\\test"
path_dict = {}

def get_unique_id(path):
    try:
        unique_id = str(len(path_dict))
        path_dict[unique_id] = path
        return unique_id
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –¥–ª—è {path}: {e}")
        return None

class FileManagerBot:
    def __init__(self, bot, main_menu):
        self.bot = bot
        self.main_menu = main_menu  # –¢–µ–ø–µ—Ä—å FileManagerBot —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ TelegramBot
        self.register_handlers()

    def register_handlers(self):
        @self.bot.callback_query_handler(func=lambda call: call.data == "main_menu")
        def _main_menu(call):
            try:
                self.bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.main_menu.send_menu(call.message.chat.id)

        @self.bot.callback_query_handler(func=lambda call: call.data == "root_folder")
        def _root_folder(call):
            self.send_folder_contents(call.message.chat.id, call.message.message_id, folder_path)

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith("folder::"))
        def _folder(call):
            self.handle_folder(call)

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith("file::"))
        def _file(call):
            self.handle_file(call)

    def send_folder_contents(self, chat_id, message_id=None, current_path=None):
        try:
            if current_path is None:
                current_path = folder_path
            
            if not os.path.exists(current_path):
                self.bot.send_message(chat_id, "–£–∫–∞–∑–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                return
            
            if not os.path.isdir(current_path):
                self.bot.send_message(chat_id, "–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π.")
                return

            markup = InlineKeyboardMarkup()
            items = os.listdir(current_path)
            for item in items:
                full_path = os.path.join(current_path, item)
                unique_id = get_unique_id(full_path)
                if not unique_id:
                    continue
                if os.path.isdir(full_path):
                    markup.add(InlineKeyboardButton(f"üìÅ {item}", callback_data=f"folder::{unique_id}"))
                elif os.path.isfile(full_path):
                    icon = self.get_file_icon(full_path)
                    markup.add(InlineKeyboardButton(f"{icon} {item}", callback_data=f"file::{unique_id}"))

            parent_folder = os.path.dirname(current_path)
            if parent_folder != current_path:
                parent_id = get_unique_id(parent_folder)
                if parent_id:
                    markup.add(InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"folder::{parent_id}"))

            markup.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
            
            text_message = f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏: {current_path}"
            
            if message_id:
                try:
                    self.bot.delete_message(chat_id, message_id)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                self.bot.send_message(chat_id, text_message, reply_markup=markup)
            else:
                self.bot.send_message(chat_id, text_message, reply_markup=markup)
        
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏ {current_path}: {e}")
            self.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–ø–∫–∏.")

    def get_file_icon(self, path):
        ext = os.path.splitext(path)[1].lower()
        return {
            '.exe': 'üëæ',
            '.zip': 'üóÇÔ∏è', '.rar': 'üóÇÔ∏è', '.7z': 'üóÇÔ∏è',
            '.docx': 'üìì',
            '.jpg': 'üñº', '.png': 'üñº', '.jpeg': 'üñº'
        }.get(ext, 'üìÑ')

    def handle_folder(self, call):
        try:
            uid = call.data.split("::")[1]
            path = path_dict.get(uid)
            if path and os.path.isdir(path):
                self.send_folder_contents(
                    call.message.chat.id,
                    call.message.message_id,
                    path
                )
            else:
                self.bot.answer_callback_query(call.id, "–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏: {e}")

    def handle_file(self, call):
        try:
            uid = call.data.split("::")[1]
            path = path_dict.get(uid)

            if not path or not os.path.isfile(path):
                self.bot.answer_callback_query(call.id, "–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return

            file_size = os.path.getsize(path)

            if file_size > 2000 * 1024 * 1024:
                self.bot.send_message(call.message.chat.id, "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è Telegram (–º–∞–∫—Å. 2 –ì–ë)")
                return

            url = f"https://api.telegram.org/bot{self.bot.token}/sendDocument"
            with open(path, "rb") as file:
                response = requests.post(
                url,
                data={"chat_id": call.message.chat.id},  # <-- –î–æ–±–∞–≤–ª—è–µ–º chat_id
                files={"document": file}
                )

            if response.status_code == 200:
                file_id = response.json().get("result", {}).get("document", {}).get("file_id")
                if file_id:
                    self.bot.send_document(call.message.chat.id, file_id, caption=f"–§–∞–π–ª: {os.path.basename(path)}")
                else:
                    self.bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è File ID")
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ Telegram API: {response.text}")
                self.bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            self.bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞")
