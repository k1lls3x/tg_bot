# student_registration.py

from sql_logic.connect_to_sql import SqlConnection
from sql_logic.queries import INSERT_STUDENT
import telebot

# –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è user_data –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ –Ω—É–∂–Ω–∞ –≤ –º–æ–¥—É–ª–µ,
# –º–æ–∂–Ω–æ –ª–∏–±–æ –æ–±—ä—è–≤–∏—Ç—å –µ—ë –∑–¥–µ—Å—å, –ª–∏–±–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –≤ —Ñ—É–Ω–∫—Ü–∏–∏.
user_data = {}

def request_student_number(message, bot):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞—á—ë—Ç–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –§–ò–û."""
    chat_id = message.chat.id
    student_number = message.text.strip()

    if not student_number.isdigit():
        msg = bot.send_message(chat_id, "‚ùå –ù–æ–º–µ—Ä –∑–∞—á—ë—Ç–∫–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(msg, lambda m: request_student_number(m, bot))
        return

    user_data[chat_id] = {"student_number": student_number}
    
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):")
    bot.register_next_step_handler(msg, lambda m: request_full_name(m, bot))

def request_full_name(message, bot):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –§–ò–û, –ø–∞—Ä—Å–∏–º –µ–≥–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –≥—Ä—É–ø–ø—ã."""
    chat_id = message.chat.id
    full_name = message.text.strip()

    if not full_name:
        msg = bot.send_message(chat_id, "‚ùå –§–ò–û –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(msg, lambda m: request_full_name(m, bot))
        return

    try:
        last_name, first_name, middle_name = parse_full_name(full_name)
        user_data[chat_id]["last_name"] = last_name
        user_data[chat_id]["first_name"] = first_name
        user_data[chat_id]["middle_name"] = middle_name
    except ValueError as e:
        msg = bot.send_message(chat_id, str(e))
        bot.register_next_step_handler(msg, lambda m: request_full_name(m, bot))
        return

    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:")
    bot.register_next_step_handler(msg, lambda m: request_group(m, bot))

def request_group(message, bot):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î."""
    chat_id = message.chat.id
    group = message.text.strip()

    if not group:
        msg = bot.send_message(chat_id, "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(msg, lambda m: request_group(m, bot))
        return

    user_data[chat_id]["group"] = group

    try:
        with SqlConnection() as (conn, cursor):
            cursor.execute(
                INSERT_STUDENT,
                (
                    chat_id,
                    user_data[chat_id]["student_number"],
                    user_data[chat_id]["last_name"],
                    user_data[chat_id]["first_name"],
                    user_data[chat_id]["middle_name"],
                    user_data[chat_id]["group"],
                    0  # –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—É—Å
                )
            )
            conn.commit()
            bot.send_message(
                chat_id, 
                f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
                f"üìå –ù–æ–º–µ—Ä –∑–∞—á—ë—Ç–∫–∏: {user_data[chat_id]['student_number']}\n"
                f"üë§ –§–∞–º–∏–ª–∏—è: {user_data[chat_id]['last_name']}\n"
                f"üë§ –ò–º—è: {user_data[chat_id]['first_name']}\n"
                f"üë§ –û—Ç—á–µ—Å—Ç–≤–æ: {user_data[chat_id]['middle_name']}\n"
                f"üéì –ì—Ä—É–ø–ø–∞: {user_data[chat_id]['group']}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /menu."
            )
            del user_data[chat_id]
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")

def parse_full_name(full_name):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –§–ò–û –≤ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ."""
    words = full_name.split()

    if len(words) == 2:
        last_name, first_name = words
        middle_name = ""
    elif len(words) == 3:
        last_name, first_name, middle_name = words
    else:
        raise ValueError("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é, –ò–º—è –∏ (–ø–æ –∂–µ–ª–∞–Ω–∏—é) –û—Ç—á–µ—Å—Ç–≤–æ.")

    return last_name, first_name, middle_name
