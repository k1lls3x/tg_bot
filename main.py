import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from functional_student_code.student_menu import TelegramBot  # –ò–º–ø–æ—Ä—Ç —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –º–µ–Ω—é
from connect_to_sql import SqlConnection
from telebot.types import ForceReply
import shutil

TOKEN = "8056279378:AAGX8tILI43XHYhJrQC3JF3xUFUoyPCr9vY"

bot = telebot.TeleBot(TOKEN)
user_data = {}
user_roles = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#SqlConnection.get_connection()
conn, cursor = SqlConnection.get_connection()
if conn and cursor:
    cursor.execute("SHOW TABLES;")
    tables = cursor.fetchall()
    print("üìÇ –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", [table[0] for table in tables])
    SqlConnection.close_connection(conn, cursor)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="teacher_button"),
        InlineKeyboardButton("–°—Ç—É–¥–µ–Ω—Ç", callback_data="student_button")
    )
    
    bot.set_my_commands([
        BotCommand("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"),
        BotCommand("menu", "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
        BotCommand("help", "–ü–æ–º–æ—â—å"),
        BotCommand("meow", "–°–∫–∞–∑–∞—Ç—å meow"),
        BotCommand("test_zapros", "—Ç–µ–°–¢"),
        BotCommand("clear", "–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç")
        
    ])
    
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –≤–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º:",
        reply_markup=markup
    )

@bot.message_handler(commands=['help'])
def send_help(message):
    bot.send_message(message.chat.id, "–í–∞–º –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç.")

@bot.message_handler(commands=['test_zapros'])
def request_student_number(message):
    """–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –∑–∞—á—ë—Ç–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –∑–∞—á—ë—Ç–∫–∏:", reply_markup=ForceReply(selective=True))
    bot.register_next_step_handler(msg, insert_student_number)

def insert_student_number(message):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä –∑–∞—á—ë—Ç–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å"""
    student_number = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    user_data[message.chat.id] = student_number  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä–µ

    conn, cursor = SqlConnection.get_connection()

    if conn and cursor:
        try:
            cursor.execute("""
                INSERT INTO students (chat_id, student_number, surname, name, patronymic, `group`, is_headman) 
                VALUES (%s, %s, %s, %s, %s, %s, %s)
            """, (message.chat.id, student_number, '–Ø—Ç–º–∞–Ω–æ–≤', '–ù–∏–∫–æ–ª–∞–π', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á', '–°–ò–°-32', 0))

            conn.commit()  # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            bot.send_message(message.chat.id, f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã! –ù–æ–º–µ—Ä –∑–∞—á—ë—Ç–∫–∏: {student_number}")

        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

        finally:
            SqlConnection.close_connection(conn, cursor)
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

@bot.message_handler(commands=['meow'])
def send_meow(message):
    bot.send_message(message.chat.id, "meow")

@bot.callback_query_handler(func=lambda call: call.data == "teacher_button")
def handle_teacher(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'"""
    delete_previous_message(call.message.chat.id, call.message.message_id)
    user_roles[call.message.chat.id] = "teacher"
    # bot.send_message(call.message.chat.id, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.")

@bot.callback_query_handler(func=lambda call: call.data == "student_button")
def handle_student(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç—É–¥–µ–Ω—Ç'"""
    delete_previous_message(call.message.chat.id, call.message.message_id)
    user_roles[call.message.chat.id] = "student"
  #  bot.send_message(call.message.chat.id, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.")
    bot_instance = TelegramBot(bot)

    bot_instance.send_menu(call.message.chat.id)

@bot.message_handler(commands=['clear'])
def clear_chat(message):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –±–æ—Ç–æ–º"""
    chat_id = message.chat.id
    message_id = message.message_id

    for i in range(200):  # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            bot.delete_message(chat_id, message_id - i)
        except telebot.apihelper.ApiException as e:
            if "message to delete not found" in str(e):
                continue  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id - i}: {e}")

    bot.send_message(chat_id, "–ß–∞—Ç –æ—á–∏—â–µ–Ω!", disable_notification=True)


@bot.message_handler(commands=['menu'])
def open_menu(message):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    role = user_roles.get(message.chat.id, None)
    
    if role == "teacher":
        bot.send_message(message.chat.id, "Coming soon...")
    elif role == "student":
        bot_instance = TelegramBot(bot)
        bot_instance.send_menu(message.chat.id)
    else:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é /start!")

def delete_previous_message(chat_id, message_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        bot.delete_message(chat_id, message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

bot.infinity_polling()
